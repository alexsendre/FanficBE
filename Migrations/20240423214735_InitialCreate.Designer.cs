// <auto-generated />
using System;
using FanficBE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FanficBE.Migrations
{
    [DbContext(typeof(FanficBEDbContext))]
    [Migration("20240423214735_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("PostsId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("CategoryPost");
                });

            modelBuilder.Entity("FanficBE.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "category one"
                        },
                        new
                        {
                            Id = 2,
                            Label = "category two"
                        },
                        new
                        {
                            Id = 3,
                            Label = "category three"
                        },
                        new
                        {
                            Id = 4,
                            Label = "category four"
                        });
                });

            modelBuilder.Entity("FanficBE.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FanficBE.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("CommentId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "Content of post 1",
                            Title = "Post 1 Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Content = "Content of post 2",
                            Title = "Post 2 Title",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Content = "Content of post 3",
                            Title = "Post 3 Title",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Content = "Content of post 4",
                            Title = "Post 4 Title",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("FanficBE.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CommentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PostId")
                        .HasColumnType("integer");

                    b.Property<bool>("Staff")
                        .HasColumnType("boolean");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Bio of user 1",
                            CreatedOn = new DateTime(2024, 4, 23, 16, 47, 35, 346, DateTimeKind.Local).AddTicks(1045),
                            Email = "john@example.com",
                            FirstName = "John",
                            Image = "image1.jpg",
                            LastName = "Doe",
                            Staff = false,
                            Uid = "user1"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Bio of user 2",
                            CreatedOn = new DateTime(2024, 4, 23, 16, 47, 35, 346, DateTimeKind.Local).AddTicks(1088),
                            Email = "jane@example.com",
                            FirstName = "Jane",
                            Image = "image2.jpg",
                            LastName = "Doe",
                            Staff = false,
                            Uid = "user2"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Bio of user 3",
                            CreatedOn = new DateTime(2024, 4, 23, 16, 47, 35, 346, DateTimeKind.Local).AddTicks(1091),
                            Email = "alex@example.com",
                            FirstName = "Alex",
                            Image = "image3.jpg",
                            LastName = "Smith",
                            Staff = false,
                            Uid = "user3"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Bio of user 4",
                            CreatedOn = new DateTime(2024, 4, 23, 16, 47, 35, 346, DateTimeKind.Local).AddTicks(1093),
                            Email = "emily@example.com",
                            FirstName = "Emily",
                            Image = "image4.jpg",
                            LastName = "Johnson",
                            Staff = false,
                            Uid = "user4"
                        });
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.HasOne("FanficBE.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FanficBE.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FanficBE.Models.Post", b =>
                {
                    b.HasOne("FanficBE.Models.Comment", null)
                        .WithMany("Posts")
                        .HasForeignKey("CommentId");
                });

            modelBuilder.Entity("FanficBE.Models.User", b =>
                {
                    b.HasOne("FanficBE.Models.Comment", null)
                        .WithMany("Users")
                        .HasForeignKey("CommentId");

                    b.HasOne("FanficBE.Models.Post", null)
                        .WithMany("Users")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("FanficBE.Models.Comment", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FanficBE.Models.Post", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
